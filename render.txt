use typed-html macro
struct Render<S>, where S: Clone + Eq + Default
  fn case takes Fn(S)->usize and Vec<html>; returns html
  fn if_else takes Fn(S)->bool, when_true: html, and when_false: html; returns html (implemented in terms of case)
  fn map takes Fn(S)->T; returns Render<T>
  fn map_all takes F: Fn(S)->T (where F: Clone and T: Clone + Diff + Default) and F2: Fn(Render<T>)->html (where F2: Clone); returns html
  fn value returns string
above methods (except map) generate placeholder html or string which is replaced when vdom is (re-)rendered based on new state
all html is immediately converted from typed-html Nodes to immutable vdom with explicit placeholders
when rendering, top-level placeholders visited if the state changes, which may cascade to map/map_all placeholders if substate changes
result of render is new vdom, which is diffed with old one to determine real dom changes

questions: how does typed-html deal with input?  Might need to use getElementById to register handlers
